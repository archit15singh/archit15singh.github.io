[{"content":"For more detailed essays, you can explore the collection directly from the 97 Things Every Programmer Should Know collection. This collection provides valuable lessons and practical tips that can benefit both novices and experienced professionals in their respective fields.\nCode Quality and Maintenance Code Readability and Documentation\nCode Design Code Is Design Encapsulate Behavior, not Just State Code Layout Code Layout Matters Comment Only What the Code Cannot Say Writing Maintainable Code Write Code as If You Had to Support It for the Rest of Your Life Write Small Functions Using Examples Code Review and Refactoring\nCode Reviews Code Reviews Refactoring Practices Improve Code by Removing It The Boy Scout Rule Own (and Refactor) the Build Automation in Refactoring Automate Your Coding Standard Testing and Debugging Automated Testing Practices\nBehavioral Testing Test for Required Behavior, not Incidental Behavior Precision in Testing Test Precisely and Concretely Continuous Testing Test While You Sleep (and over Weekends) Write Tests for People Debugging Techniques and Error Handling\nLogging and Error Handling Verbose Logging Will Disturb Your Sleep Don\u0026rsquo;t Ignore that Error! Prevent Errors Debugging Tools and Techniques How to Use a Bug Tracker News of the Weird: Testers Are Your Friends Design Principles Modularity and Reusability\nSingle Responsibility and Modularity The Single Responsibility Principle Don\u0026rsquo;t Repeat Yourself Encapsulation and Types Encapsulate Behavior, not Just State Prefer Domain-Specific Types to Primitive Types Missing Opportunities for Polymorphism API and Interface Design\nAPI Design The Golden Rule of API Design Interface Usability Make Interfaces Easy to Use Correctly and Hard to Use Incorrectly Development Practices Agile and Iterative Development\nEarly and Frequent Releases Deploy Early and Often Practice and Feedback Do Lots of Deliberate Practice Step Back and Automate, Automate, Automate Version Control Put Everything Under Version Control Prudence in Development Act with Prudence Risk-Taking Don\u0026rsquo;t Be Afraid to Break Things Commit Practices Know Your Next Commit Tooling and Environment\nCommand-line Tools Know How to Use Command-line Tools Integrated Development Environment (IDE) Know Your IDE Analysis Tools Take Advantage of Code Analysis Tools Unix Tools The Unix Tools Are Your Friends Performance and Optimization Optimization Techniques\nReduction in Complexity Simplicity Comes from Reduction Algorithm and Data Structure Selection Use the Right Algorithm and Data Structure Performance Issues The Road to Performance Is Littered with Dirty Code Bombs Concurrency and Scalability\nMessage Passing Message Passing Leads to Better Scalability in Parallel Systems Inter-Process Communication Inter-Process Communication Affects Application Response Time Professional Development Learning and Growth\nContinuous Improvement Continuous Learning Reinvent the Wheel Often Openness to Opportunities Start from Yes Language Skills Learn Foreign Languages Know Well More than Two Programming Languages Estimation and Planning\nProject Estimation Learn to Estimate Prudent Actions Act with Prudence Broad Learning Read the Humanities Collaboration and Communication Teamwork and Pair Programming\nPair Programming Pair Program and Feel the Flow Collaborative Problem-Solving Two Heads Are Often Better than One When Programmers and Testers Collaborate Customer Interaction and Requirements\nCustomer Communication Your Customers Do not Mean What They Say Project Advocacy Let Your Project Speak for Itself Code Reading Read Code Defensive Programming Error Handling and Prevention\nPreventive Measures Prevent Errors Error Handling Practices Don\u0026rsquo;t Rely on \u0026ldquo;Magic Happens Here\u0026rdquo; Don\u0026rsquo;t Be Cute with Your Test Data Interim Solutions The Longevity of Interim Solutions Safe Code Modifications\nCode Changes Don\u0026rsquo;t Touch that Code! Build Management Own (and Refactor) the Build Culture and Philosophy Programming Philosophy\nRole and Mythology The Guru Myth Hard Work Does not Pay Off Cultural Understanding Don\u0026rsquo;t Just Learn the Language, Understand its Culture Community Coding Ubuntu Coding for Your Friends Behavior and Attitude\nSelf-awareness Know Your Limits Work-Life Balance Put the Mouse Down and Step Away from the Keyboard Ethical Coding You Gotta Care about the Code Technical Concepts Fundamental Concepts Numerical Accuracy Floating-point Numbers Aren\u0026rsquo;t Real Data Management Large Interconnected Data Belongs to a Database Build and Linking The Linker Is not a Magical Program Deployment One Binary Specific Practices and Tools Version Control and Build Management Version Control Put Everything Under Version Control Build Practices Own (and Refactor) the Build Keep the Build Clean Know Your Next Commit ","permalink":"https://archit15singh.github.io/posts/2024-07-12-god-programmer/","summary":"\u003cp\u003eFor more detailed essays, you can explore the collection directly from the \u003ca href=\"https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/\"\u003e97 Things Every Programmer Should Know\u003c/a\u003e collection.\nThis collection provides valuable lessons and practical tips that can benefit both novices and experienced professionals in their respective fields.\u003c/p\u003e\n\u003ch3 id=\"code-quality-and-maintenance\"\u003eCode Quality and Maintenance\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCode Readability and Documentation\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCode Design\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eCode Is Design\u003c/li\u003e\n\u003cli\u003eEncapsulate Behavior, not Just State\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCode Layout\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eCode Layout Matters\u003c/li\u003e\n\u003cli\u003eComment Only What the Code Cannot Say\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWriting Maintainable Code\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eWrite Code as If You Had to Support It for the Rest of Your Life\u003c/li\u003e\n\u003cli\u003eWrite Small Functions Using Examples\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCode Review and Refactoring\u003c/strong\u003e\u003c/p\u003e","title":"God Programmer Traits"},{"content":"Asyncio is a powerful library in Python that enables writing concurrent code using the async/await syntax. It provides a framework for managing I/O-bound and high-level structured network code. Asyncio is widely used in web servers, database drivers, network protocols, and other applications that require concurrency without the complexity of traditional threading or multiprocessing.\nIntroduction to Asyncio Asyncio has become a cornerstone for modern Python applications that need to handle asynchronous tasks efficiently. Its ability to manage multiple tasks simultaneously makes it an ideal choice for various real-world scenarios.\nTopics Introduction to Asyncio\nOverview Importance in modern applications Core Concepts and Components\nEvent Loop Coroutines Tasks Futures Gather and Wait Exception Handling Asyncio Primitives\nLocks Events Conditions Semaphores Real-World Use Cases\nWeb Scraping Web Servers Microservices Network Clients and Servers Periodic Tasks Asynchronous Database Operations Advanced Features\nCustom Event Loops Subprocess Management Signal Handling Thread and Process Integration Best Practices and Patterns\nError Handling and Debugging Performance Optimization Testing Asynchronous Code Comparisons with Other Concurrency Models\nThreads vs Asyncio Multiprocessing vs Asyncio Asyncio vs Concurrent.Futures Core Concepts and Components Event Loop The event loop is the heart of asyncio. It runs asynchronous tasks and callbacks, handles I/O operations, and schedules tasks.\nCoroutines Coroutines are special functions defined with async def and can be paused and resumed, allowing other code to run during their execution.\nTasks Tasks are used to schedule coroutines concurrently. They are created using asyncio.create_task().\nFutures Futures represent the result of an asynchronous operation. They are usually not created directly but returned by asyncio APIs.\nGather and Wait asyncio.gather() runs multiple coroutines concurrently and waits for them all to complete. asyncio.wait() waits for the completion of Futures or coroutines.\nException Handling Proper exception handling in asyncio is crucial for robust applications. Use try/except blocks within coroutines and handle task exceptions using add_done_callback() or asyncio.wait().\nAsyncio Primitives Locks Asyncio provides Lock for synchronizing access to shared resources.\nEvents Event is a simple mechanism for communication between coroutines.\nConditions Condition is used for complex synchronization patterns involving multiple coroutines.\nSemaphores Semaphore limits access to a resource by a specific number of coroutines.\nReal-World Use Cases Web Scraping Asyncio is excellent for web scraping due to its ability to handle multiple I/O-bound tasks concurrently.\nimport asyncio import aiohttp async def fetch_url(session, url): async with session.get(url) as response: return await response.text() async def main(urls): async with aiohttp.ClientSession() as session: tasks = [fetch_url(session, url) for url in urls] return await asyncio.gather(*tasks) urls = [\u0026#39;https://example.com\u0026#39;, \u0026#39;https://example.org\u0026#39;] results = asyncio.run(main(urls)) Web Servers Frameworks like FastAPI leverage asyncio to build high-performance web servers.\nfrom fastapi import FastAPI app = FastAPI() @app.get(\u0026#34;/\u0026#34;) async def read_root(): return {\u0026#34;Hello\u0026#34;: \u0026#34;World\u0026#34;} Microservices Asyncio is used in microservices for handling high-throughput, low-latency services.\nNetwork Clients and Servers Asyncio\u0026rsquo;s StreamReader and StreamWriter are used for creating network clients and servers.\nimport asyncio async def handle_echo(reader, writer): data = await reader.read(100) message = data.decode() writer.write(data) await writer.drain() writer.close() async def main(): server = await asyncio.start_server(handle_echo, \u0026#39;127.0.0.1\u0026#39;, 8888) async with server: await server.serve_forever() asyncio.run(main()) Periodic Tasks Using asyncio.sleep() to create periodic tasks.\nasync def periodic(): while True: print(\u0026#34;Task running...\u0026#34;) await asyncio.sleep(5) asyncio.run(periodic()) Asynchronous Database Operations Async libraries like aiomysql and asyncpg allow for asynchronous database interactions.\nimport asyncio import asyncpg async def fetch_data(): conn = await asyncpg.connect(\u0026#39;postgresql://user:password@localhost/dbname\u0026#39;) values = await conn.fetch(\u0026#39;SELECT * FROM table_name\u0026#39;) await conn.close() return values asyncio.run(fetch_data()) Advanced Features Custom Event Loops Creating custom event loops for specific use cases.\nSubprocess Management Managing subprocesses with asyncio.\nSignal Handling Handling OS signals with asyncio.\nThread and Process Integration Combining threads and processes with asyncio using loop.run_in_executor().\nBest Practices and Patterns Error Handling and Debugging Effective strategies for handling errors and debugging asyncio applications.\nPerformance Optimization Techniques for optimizing the performance of asyncio applications.\nTesting Asynchronous Code Approaches to testing asyncio code.\nComparisons with Other Concurrency Models Threads vs Asyncio Comparison of threading and asyncio, highlighting the strengths and weaknesses of each.\nMultiprocessing vs Asyncio Comparison of multiprocessing and asyncio, focusing on use cases and performance.\nAsyncio vs Concurrent.Futures Comparison of asyncio with the concurrent.futures module.\nConclusion Asyncio is a versatile and powerful library for writing concurrent code in Python. Its ability to handle a wide range of tasks, from web servers to network clients, makes it an essential tool for modern Python developers. By understanding the core concepts, real-world use cases, and best practices, you can harness the full potential of asyncio in your applications.\n","permalink":"https://archit15singh.github.io/posts/2024-05-07-asyncio-in-real-world-applications-a-comprehensive-guide/","summary":"\u003cp\u003eAsyncio is a powerful library in Python that enables writing concurrent code using the async/await syntax. It provides a framework for managing I/O-bound and high-level structured network code. Asyncio is widely used in web servers, database drivers, network protocols, and other applications that require concurrency without the complexity of traditional threading or multiprocessing.\u003c/p\u003e\n\u003ch2 id=\"introduction-to-asyncio\"\u003eIntroduction to Asyncio\u003c/h2\u003e\n\u003cp\u003eAsyncio has become a cornerstone for modern Python applications that need to handle asynchronous tasks efficiently. Its ability to manage multiple tasks simultaneously makes it an ideal choice for various real-world scenarios.\u003c/p\u003e","title":"Asyncio in Real-World Applications: A Comprehensive Guide"},{"content":"This is a test post content.\n","permalink":"https://archit15singh.github.io/posts/minimal-test-post/","summary":"\u003cp\u003eThis is a test post content.\u003c/p\u003e","title":"Minimal Test Post"},{"content":"This is just a test post!\nTesting quotes\nItalics\nBold!\nHeading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Bulleted list 1 Bulleted list 2 Bulleterd list 3 Ordered list Ordered list Ordered list ","permalink":"https://archit15singh.github.io/posts/2022-07-29-test-post/","summary":"\u003cp\u003eThis is just a test post!\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTesting quotes\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cem\u003eItalics\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBold!\u003c/strong\u003e\u003c/p\u003e\n\u003ch1 id=\"heading-1\"\u003e\u003cstrong\u003eHeading 1\u003c/strong\u003e\u003c/h1\u003e\n\u003ch2 id=\"heading-2\"\u003eHeading 2\u003c/h2\u003e\n\u003ch3 id=\"heading-3\"\u003eHeading 3\u003c/h3\u003e\n\u003ch4 id=\"heading-4\"\u003eHeading 4\u003c/h4\u003e\n\u003ch5 id=\"heading-5\"\u003eHeading 5\u003c/h5\u003e\n\u003ch6 id=\"heading-6\"\u003eHeading 6\u003c/h6\u003e\n\u003cul\u003e\n\u003cli\u003eBulleted list 1\u003c/li\u003e\n\u003cli\u003eBulleted list 2\u003c/li\u003e\n\u003cli\u003eBulleterd list 3\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003eOrdered list\u003c/li\u003e\n\u003cli\u003eOrdered list\u003c/li\u003e\n\u003cli\u003eOrdered list\u003c/li\u003e\n\u003c/ol\u003e","title":"Test Post"},{"content":"Social Icons Name Platform Link 123rf 123rf.com adobestock stock.adobe.com apple music music.apple.com behance behance.net bilibili bilibili.com bitcoin - buymeacoffee buymeacoffee.com codepen codepen.io cryptohack cryptohack.org ctftime ctftime.org cv - deezer deezer.com dev dev.to discogs discogs.com discord discord.com dreamstime dreamstime.com dribbble dribbble.com email - facebook facebook.com flickr flickr.com freepik freepik.com gitea gitea.io github github.com gitlab gitlab.com goodreads goodreads.com googlescholar scholar.google.com guruShots gurushots.com hackerone hackerone.com hackerrank hackerrank.com hackthebox hackthebox.eu instagram instagram.com itchio itch.io kaggle - kakaotalk kakaocorp.com/service/KakaoTalk key - keybase keybase.io kofi ko-fi.com komoot - lastfm last.fm letterboxd - liberapay liberapay.com linkedin linkedin.com mastodon mastodon.social matrix matrix.org medium medium.com monero - mixcloud mixcloud.com nuget nuget.org paypal paypal.com peertube - pgp - phone - ploywork ploywork.com qq qq.com reddit reddit.com researchgate researchgate.net rss - serverfault serverfault.com soundcloud soundcloud.com shutterstock shutterstock.com slack slack.com snapchat snapchat.com/add spotify spotify.com stackoverflow stackoverflow.com steam steampowered.com strava strava.com telegram telegram.org `tiktok tiktok.com twitch twitch.tv twitter twitter.com unsplash unsplash.com xda xda-developers.com xing xing.com ycombinator ycombinator.com youtube youtube.com other - Usage :\nsocialIcons: - name: \u0026#34;kofi\u0026#34; url: \u0026#34;https://kofi.com\u0026#34; - name: \u0026#34;twitter\u0026#34; url: \u0026#34;https://twitter.com\u0026#34; Share Icons No. Platform twitter (also generates hash tags from tags linked with post) linkedin reddit facebook whatsapp telegram Usage:\nparams: ShowShareButtons: true params: ShareButtons: [\u0026#34;linkedin\u0026#34;, \u0026#34;twitter\u0026#34;] # To customize which share buttons to be enabled on page ","permalink":"https://archit15singh.github.io/posts/papermod-icons/","summary":"List of all Icons supported by PaperMod","title":"Icons"},{"content":"Below are variables used with this theme\u0026hellip;\nSite Variables under Params name type example Description env string \u0026lsquo;production\u0026rsquo; To set env to production title string \u0026lsquo;My Blog\u0026rsquo; To set title description string \u0026lsquo;This is a blog of mine\u0026rsquo; To set site description author string |list \u0026lsquo;Me\u0026rsquo; | [\u0026lsquo;Me\u0026rsquo;,\u0026lsquo;You\u0026rsquo;] To show multiple Authors images string \u0026lsquo;myimage.png\u0026rsquo; Link or path of image for opengraph, twitter-cards keywords list [blog, page] Add keywords for Home page DateFormat string \u0026ldquo;January 2, 2006\u0026rdquo; The format of date strings in the website. Details languageAltTitle string \u0026ldquo;English\u0026rdquo; Alternate title in Multilingual Mode ShowReadingTime boolean true | false To show read time in post meta ShowShareButtons boolean true | false To show/hide share buttons under post ShowCodeCopyButtons boolean true | false To show/hide Code Copy button ShowFullTextinRSS boolean true | false To show Content in RSS feed defaultTheme string light | dark | auto To set default theme disableThemeToggle boolean true | false To disable theme toggle icon shown besides label disableSpecial1stPost boolean true | false To disable no-card special appearance of 1st post disableScrollToTop boolean true | false To disable ScrollToTop button disableAnchoredHeadings boolean true | false To disable Anchored Headings hideMeta boolean true | false To Hide meta elements : date, read-time, author and available-translations for page hideSummary boolean true | false To Hide summary being shown in list pages showtoc boolean true | false To show/hide Table of Contents tocopen boolean true | false To keep open ToC by default on page load ShowPostNavLinks boolean true | false Show Previous and Next Posts below a Post ShowBreadCrumbs boolean true | false Show BreadCrumb Navigation above single post/page ShareButtons list [\u0026ldquo;linkedin\u0026rdquo;, \u0026ldquo;twitter\u0026rdquo;] To customize which share buttons to be enabled on page ShowWordCount boolean true | false To word count to metadata ShowRssButtonInSectionTermList boolean true | false To show RSS icon in Section, Term and List pages UseHugoToc boolean true | false To use Hugo\u0026rsquo;s default Toc instead of custom comments boolean true | false To show/hide comments hideFooter boolean true | false To Hide Footer Text om the end of page CanonicalLinkText string \u0026lsquo;Originally published at\u0026rsquo; To show text before canonical URL\u0026rsquo;s hostname analytics.google.SiteVerificationTag string \u0026ldquo;XYZabc\u0026rdquo; Site Verification Tag for Google Analytics analytics.bing.SiteVerificationTag string \u0026ldquo;XYZabc\u0026rdquo; Site Verification Tag for Bing analytics.yandex.SiteVerificationTag string \u0026ldquo;XYZabc\u0026rdquo; Site Verification Tag for Yandex schema - - Details fuseOpts - - Details socialIcons - - Details label - - Details assets - - Details cover - - Details profileMode - - Details editPost - - Details Site Variables name type example Description copyright string **[example.site](https://example.site)** This is HUGO\u0026rsquo;s site variable, which can also render markdown content label name type example Description label.text string \u0026lsquo;Home\u0026rsquo; To display different label text other than title label.icon string \u0026lsquo;/apple-touch-icon.png\u0026rsquo; To display a logo image in label label.iconHeight integer 35 To set size of label logo image profileMode name type example Description profileMode.enabled boolean true | false For enabling profileMode, needs to be explicitly set profileMode.title string \u0026ldquo;Title\u0026rdquo; Title profileMode.subtitle string \u0026ldquo;subtitle here\u0026rdquo; Subtitle profileMode.imageUrl string \u0026ldquo;image.png\u0026rdquo; | \u0026ldquo;https://example.com/image.jpg\" Image URL or Link profileMode.imageWidth string \u0026ldquo;150\u0026rdquo; Width of image profileMode.imageHeight string \u0026ldquo;150\u0026rdquo; Height of image profileMode.imageTitle string \u0026ldquo;This image is a picture of ..\u0026rdquo; Title of image profileMode.buttons - - Details profileMode.buttons profileMode: buttons: - name: Archive url: \u0026#34;/archive\u0026#34; - name: Github url: \u0026#34;https://github.com/\u0026#34; assets name type example Description assets.favicon string \u0026lsquo;icon.ico\u0026rsquo; To set favicon, can be path or external link assets.disableHLJS boolean true | false To disable Highlight.js loading assets.disableFingerprinting boolean true | false To disable Sub-Resource integrity for assets assets.theme_color string \u0026lsquo;#color\u0026rsquo; To set custom meta theme-color assets.msapplication_TileColor string \u0026lsquo;#color\u0026rsquo; To set custom msapplication_TileColor cover name type example Description cover.linkFullImages boolean true | false To open full size cover images on click on cover cover.responsiveImages boolean true | false To enable/disable generation of responsive cover images cover.hidden boolean true | false To hide everywhere but not in structured data cover.hiddenInList boolean true | false To hide on list pages and home cover.hiddenInSingle boolean true | false To hide on list pages and home schema name type example Description schema.publisherType string \u0026lsquo;Organization\u0026rsquo; https://schema.org/publisher schema.sameAs list [\u0026ldquo;URL1\u0026rdquo;, \u0026ldquo;URL2\u0026rdquo;] Set https://schema.org/sameAs fuseOpts Refer: https://fusejs.io/api/options.html\nfuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] ## can be less but not more than shown in list socialIcons socialIcons: - name: \u0026#34;\u0026lt;platform\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link\u0026gt;\u0026#34; - name: \u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link2\u0026gt;\u0026#34; editPost editPost: URL: \u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; # edit text appendFilePath: true # to append file path to Edit link Note: Same format is being used by Page Variables\nPage Variables Name Type Example Description showtoc boolean true | false To show/hide Table of Contents tocopen boolean true | false To keep open ToC by default on page load hidemeta boolean true | false To Hide meta elements : date, read-time, author and available-translations for page comments boolean true | false To show/hide comments description string \u0026lsquo;description text\u0026rsquo; Show Post Description under Title canonicalURL string \u0026ldquo;https://canonical.url/to/page\" To add canonical URL to posts ShowCanonicalLink boolean true | false To show canonical URL\u0026rsquo;s hostname CanonicalLinkText string \u0026lsquo;Originally published at\u0026rsquo; To show text before canonical URL\u0026rsquo;s hostname disableShare boolean true | false To hide/show share icons under a page disableHLJS boolean true | false To disable Highlight.js loading disableAnchoredHeadings boolean true | false To disable Anchored Headings searchHidden boolean true | false Hide page from search hideSummary boolean true | false To Hide summary being shown in list pages hideFooter boolean true | false To Hide Footer Text om the end of page ShowReadingTime boolean true | false To show read time in post meta ShowBreadCrumbs boolean true | false Show BreadCrumb Navigation above single post/page ShowPostNavLinks boolean true | false Show Previous and Next Posts below a Post ShowCodeCopyButtons boolean true | false To show/hide Code Copy button author string |list \u0026lsquo;Me\u0026rsquo; | [\u0026lsquo;Me\u0026rsquo;,\u0026lsquo;You\u0026rsquo;] To show multiple Authors cover.image string \u0026lsquo;featured.jpg\u0026rsquo; To add a cover image cover.caption string \u0026lsquo;caption for image\u0026rsquo; To add caption to cover image cover.alt string \u0026rsquo;this is cover image\u0026rsquo; Alternate text to show if image doesn\u0026rsquo;t load/show up cover.relative boolean true | false To use relative path for cover image, used in hugo Page-bundles cover.responsiveImages boolean true | false To enable/disable generation of responsive cover images cover.hidden boolean true | false To hide on current single page weight integer 5 To set page order or to pin a post to Top of list ShareButtons list [\u0026ldquo;linkedin\u0026rdquo;, \u0026ldquo;twitter\u0026rdquo;] To customize which share buttons to be enabled on page ShowWordCount boolean true | false To word count to metadata ShowRssButtonInSectionTermList boolean true | false To show RSS icon in Section, Term and List pages UseHugoToc boolean true | false To use Hugo\u0026rsquo;s default Toc instead of custom robotsNoIndex boolean true | false To hide a particular page from indexing by search engines ","permalink":"https://archit15singh.github.io/posts/papermod-variables/","summary":"List of Front Matter variables used by PaperMod","title":"Variables | Front Matter"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Inline Code This is Inline Code\nOnly pre This is pre text Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with backticks and language specified 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Gist List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://archit15singh.github.io/posts/markdown-syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode ","permalink":"https://archit15singh.github.io/posts/rich-content/","summary":"\u003cp\u003eHugo ships with several \u003ca href=\"https://gohugo.io/content-management/shortcodes/#use-hugos-built-in-shortcodes\"\u003eBuilt-in Shortcodes\u003c/a\u003e for rich content, along with a \u003ca href=\"https://gohugo.io/about/hugo-and-gdpr/\"\u003ePrivacy Config\u003c/a\u003e and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\u003c/p\u003e","title":"Rich Content"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates (extend_head.html) like so: refer ISSUE #236 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\) Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","permalink":"https://archit15singh.github.io/posts/math-typesetting/","summary":"\u003cp\u003eMathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\u003c/p\u003e","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","permalink":"https://archit15singh.github.io/posts/emoji-support/","summary":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways.\u003c/p\u003e","title":"Emoji Support"}]